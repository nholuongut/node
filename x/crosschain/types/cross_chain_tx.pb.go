// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/cross_chain_tx.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/zeta-chain/zetacore/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CctxStatus int32

const (
	CctxStatus_PendingInbound  CctxStatus = 0
	CctxStatus_PendingOutbound CctxStatus = 1
	CctxStatus_OutboundMined   CctxStatus = 3
	CctxStatus_PendingRevert   CctxStatus = 4
	CctxStatus_Reverted        CctxStatus = 5
	CctxStatus_Aborted         CctxStatus = 6
)

var CctxStatus_name = map[int32]string{
	0: "PendingInbound",
	1: "PendingOutbound",
	3: "OutboundMined",
	4: "PendingRevert",
	5: "Reverted",
	6: "Aborted",
}

var CctxStatus_value = map[string]int32{
	"PendingInbound":  0,
	"PendingOutbound": 1,
	"OutboundMined":   3,
	"PendingRevert":   4,
	"Reverted":        5,
	"Aborted":         6,
}

func (x CctxStatus) String() string {
	return proto.EnumName(CctxStatus_name, int32(x))
}

func (CctxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{0}
}

type TxFinalizationStatus int32

const (
	TxFinalizationStatus_NotFinalized TxFinalizationStatus = 0
	TxFinalizationStatus_Finalized    TxFinalizationStatus = 1
	TxFinalizationStatus_Executed     TxFinalizationStatus = 2
)

var TxFinalizationStatus_name = map[int32]string{
	0: "NotFinalized",
	1: "Finalized",
	2: "Executed",
}

var TxFinalizationStatus_value = map[string]int32{
	"NotFinalized": 0,
	"Finalized":    1,
	"Executed":     2,
}

func (x TxFinalizationStatus) String() string {
	return proto.EnumName(TxFinalizationStatus_name, int32(x))
}

func (TxFinalizationStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{1}
}

type InboundTxParams struct {
	Sender                          string                                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChainId                   int64                                   `protobuf:"varint,2,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	TxOrigin                        string                                  `protobuf:"bytes,3,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	CoinType                        common.CoinType                         `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=common.CoinType" json:"coin_type,omitempty"`
	Asset                           string                                  `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount                          github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	InboundTxObservedHash           string                                  `protobuf:"bytes,7,opt,name=inbound_tx_observed_hash,json=inboundTxObservedHash,proto3" json:"inbound_tx_observed_hash,omitempty"`
	InboundTxObservedExternalHeight uint64                                  `protobuf:"varint,8,opt,name=inbound_tx_observed_external_height,json=inboundTxObservedExternalHeight,proto3" json:"inbound_tx_observed_external_height,omitempty"`
	InboundTxBallotIndex            string                                  `protobuf:"bytes,9,opt,name=inbound_tx_ballot_index,json=inboundTxBallotIndex,proto3" json:"inbound_tx_ballot_index,omitempty"`
	InboundTxFinalizedZetaHeight    uint64                                  `protobuf:"varint,10,opt,name=inbound_tx_finalized_zeta_height,json=inboundTxFinalizedZetaHeight,proto3" json:"inbound_tx_finalized_zeta_height,omitempty"`
	TxFinalizationStatus            TxFinalizationStatus                    `protobuf:"varint,11,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=zetachain.zetacore.crosschain.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
}

func (m *InboundTxParams) Reset()         { *m = InboundTxParams{} }
func (m *InboundTxParams) String() string { return proto.CompactTextString(m) }
func (*InboundTxParams) ProtoMessage()    {}
func (*InboundTxParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{0}
}
func (m *InboundTxParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundTxParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundTxParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundTxParams.Merge(m, src)
}
func (m *InboundTxParams) XXX_Size() int {
	return m.Size()
}
func (m *InboundTxParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_InboundTxParams proto.InternalMessageInfo

func (m *InboundTxParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InboundTxParams) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *InboundTxParams) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *InboundTxParams) GetCoinType() common.CoinType {
	if m != nil {
		return m.CoinType
	}
	return common.CoinType_Zeta
}

func (m *InboundTxParams) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *InboundTxParams) GetInboundTxObservedHash() string {
	if m != nil {
		return m.InboundTxObservedHash
	}
	return ""
}

func (m *InboundTxParams) GetInboundTxObservedExternalHeight() uint64 {
	if m != nil {
		return m.InboundTxObservedExternalHeight
	}
	return 0
}

func (m *InboundTxParams) GetInboundTxBallotIndex() string {
	if m != nil {
		return m.InboundTxBallotIndex
	}
	return ""
}

func (m *InboundTxParams) GetInboundTxFinalizedZetaHeight() uint64 {
	if m != nil {
		return m.InboundTxFinalizedZetaHeight
	}
	return 0
}

func (m *InboundTxParams) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NotFinalized
}

type ZetaAccounting struct {
	// aborted_zeta_amount stores the total aborted amount for cctx of coin-type ZETA
	AbortedZetaAmount github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=aborted_zeta_amount,json=abortedZetaAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"aborted_zeta_amount"`
}

func (m *ZetaAccounting) Reset()         { *m = ZetaAccounting{} }
func (m *ZetaAccounting) String() string { return proto.CompactTextString(m) }
func (*ZetaAccounting) ProtoMessage()    {}
func (*ZetaAccounting) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{1}
}
func (m *ZetaAccounting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZetaAccounting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZetaAccounting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZetaAccounting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZetaAccounting.Merge(m, src)
}
func (m *ZetaAccounting) XXX_Size() int {
	return m.Size()
}
func (m *ZetaAccounting) XXX_DiscardUnknown() {
	xxx_messageInfo_ZetaAccounting.DiscardUnknown(m)
}

var xxx_messageInfo_ZetaAccounting proto.InternalMessageInfo

type OutboundTxParams struct {
	Receiver           string                                  `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChainId    int64                                   `protobuf:"varint,2,opt,name=receiver_chainId,json=receiverChainId,proto3" json:"receiver_chainId,omitempty"`
	CoinType           common.CoinType                         `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=common.CoinType" json:"coin_type,omitempty"`
	Amount             github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	OutboundTxTssNonce uint64                                  `protobuf:"varint,5,opt,name=outbound_tx_tss_nonce,json=outboundTxTssNonce,proto3" json:"outbound_tx_tss_nonce,omitempty"`
	OutboundTxGasLimit uint64                                  `protobuf:"varint,6,opt,name=outbound_tx_gas_limit,json=outboundTxGasLimit,proto3" json:"outbound_tx_gas_limit,omitempty"`
	OutboundTxGasPrice string                                  `protobuf:"bytes,7,opt,name=outbound_tx_gas_price,json=outboundTxGasPrice,proto3" json:"outbound_tx_gas_price,omitempty"`
	// the above are commands for zetaclients
	// the following fields are used when the outbound tx is mined
	OutboundTxHash                   string                                 `protobuf:"bytes,8,opt,name=outbound_tx_hash,json=outboundTxHash,proto3" json:"outbound_tx_hash,omitempty"`
	OutboundTxBallotIndex            string                                 `protobuf:"bytes,9,opt,name=outbound_tx_ballot_index,json=outboundTxBallotIndex,proto3" json:"outbound_tx_ballot_index,omitempty"`
	OutboundTxObservedExternalHeight uint64                                 `protobuf:"varint,10,opt,name=outbound_tx_observed_external_height,json=outboundTxObservedExternalHeight,proto3" json:"outbound_tx_observed_external_height,omitempty"`
	OutboundTxGasUsed                uint64                                 `protobuf:"varint,20,opt,name=outbound_tx_gas_used,json=outboundTxGasUsed,proto3" json:"outbound_tx_gas_used,omitempty"`
	OutboundTxEffectiveGasPrice      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,21,opt,name=outbound_tx_effective_gas_price,json=outboundTxEffectiveGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"outbound_tx_effective_gas_price"`
	OutboundTxEffectiveGasLimit      uint64                                 `protobuf:"varint,22,opt,name=outbound_tx_effective_gas_limit,json=outboundTxEffectiveGasLimit,proto3" json:"outbound_tx_effective_gas_limit,omitempty"`
	TssPubkey                        string                                 `protobuf:"bytes,11,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
	TxFinalizationStatus             TxFinalizationStatus                   `protobuf:"varint,12,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=zetachain.zetacore.crosschain.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
}

func (m *OutboundTxParams) Reset()         { *m = OutboundTxParams{} }
func (m *OutboundTxParams) String() string { return proto.CompactTextString(m) }
func (*OutboundTxParams) ProtoMessage()    {}
func (*OutboundTxParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{2}
}
func (m *OutboundTxParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTxParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTxParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTxParams.Merge(m, src)
}
func (m *OutboundTxParams) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTxParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTxParams proto.InternalMessageInfo

func (m *OutboundTxParams) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OutboundTxParams) GetReceiverChainId() int64 {
	if m != nil {
		return m.ReceiverChainId
	}
	return 0
}

func (m *OutboundTxParams) GetCoinType() common.CoinType {
	if m != nil {
		return m.CoinType
	}
	return common.CoinType_Zeta
}

func (m *OutboundTxParams) GetOutboundTxTssNonce() uint64 {
	if m != nil {
		return m.OutboundTxTssNonce
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxGasLimit() uint64 {
	if m != nil {
		return m.OutboundTxGasLimit
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxGasPrice() string {
	if m != nil {
		return m.OutboundTxGasPrice
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxHash() string {
	if m != nil {
		return m.OutboundTxHash
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxBallotIndex() string {
	if m != nil {
		return m.OutboundTxBallotIndex
	}
	return ""
}

func (m *OutboundTxParams) GetOutboundTxObservedExternalHeight() uint64 {
	if m != nil {
		return m.OutboundTxObservedExternalHeight
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxGasUsed() uint64 {
	if m != nil {
		return m.OutboundTxGasUsed
	}
	return 0
}

func (m *OutboundTxParams) GetOutboundTxEffectiveGasLimit() uint64 {
	if m != nil {
		return m.OutboundTxEffectiveGasLimit
	}
	return 0
}

func (m *OutboundTxParams) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

func (m *OutboundTxParams) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NotFinalized
}

type Status struct {
	Status              CctxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=zetachain.zetacore.crosschain.CctxStatus" json:"status,omitempty"`
	StatusMessage       string     `protobuf:"bytes,2,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	LastUpdateTimestamp int64      `protobuf:"varint,3,opt,name=lastUpdate_timestamp,json=lastUpdateTimestamp,proto3" json:"lastUpdate_timestamp,omitempty"`
	IsAbortRefunded     bool       `protobuf:"varint,4,opt,name=isAbortRefunded,proto3" json:"isAbortRefunded,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() CctxStatus {
	if m != nil {
		return m.Status
	}
	return CctxStatus_PendingInbound
}

func (m *Status) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Status) GetLastUpdateTimestamp() int64 {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return 0
}

func (m *Status) GetIsAbortRefunded() bool {
	if m != nil {
		return m.IsAbortRefunded
	}
	return false
}

type CrossChainTx struct {
	Creator          string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string                                  `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ZetaFees         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=zeta_fees,json=zetaFees,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"zeta_fees" yaml:"zeta_fees"`
	RelayedMessage   string                                  `protobuf:"bytes,6,opt,name=relayed_message,json=relayedMessage,proto3" json:"relayed_message,omitempty"`
	CctxStatus       *Status                                 `protobuf:"bytes,8,opt,name=cctx_status,json=cctxStatus,proto3" json:"cctx_status,omitempty"`
	InboundTxParams  *InboundTxParams                        `protobuf:"bytes,9,opt,name=inbound_tx_params,json=inboundTxParams,proto3" json:"inbound_tx_params,omitempty"`
	OutboundTxParams []*OutboundTxParams                     `protobuf:"bytes,10,rep,name=outbound_tx_params,json=outboundTxParams,proto3" json:"outbound_tx_params,omitempty"`
}

func (m *CrossChainTx) Reset()         { *m = CrossChainTx{} }
func (m *CrossChainTx) String() string { return proto.CompactTextString(m) }
func (*CrossChainTx) ProtoMessage()    {}
func (*CrossChainTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_af3a0ad055343c21, []int{4}
}
func (m *CrossChainTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTx.Merge(m, src)
}
func (m *CrossChainTx) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTx.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTx proto.InternalMessageInfo

func (m *CrossChainTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CrossChainTx) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CrossChainTx) GetRelayedMessage() string {
	if m != nil {
		return m.RelayedMessage
	}
	return ""
}

func (m *CrossChainTx) GetCctxStatus() *Status {
	if m != nil {
		return m.CctxStatus
	}
	return nil
}

func (m *CrossChainTx) GetInboundTxParams() *InboundTxParams {
	if m != nil {
		return m.InboundTxParams
	}
	return nil
}

func (m *CrossChainTx) GetOutboundTxParams() []*OutboundTxParams {
	if m != nil {
		return m.OutboundTxParams
	}
	return nil
}

func init() {
	proto.RegisterEnum("zetachain.zetacore.crosschain.CctxStatus", CctxStatus_name, CctxStatus_value)
	proto.RegisterEnum("zetachain.zetacore.crosschain.TxFinalizationStatus", TxFinalizationStatus_name, TxFinalizationStatus_value)
	proto.RegisterType((*InboundTxParams)(nil), "zetachain.zetacore.crosschain.InboundTxParams")
	proto.RegisterType((*ZetaAccounting)(nil), "zetachain.zetacore.crosschain.ZetaAccounting")
	proto.RegisterType((*OutboundTxParams)(nil), "zetachain.zetacore.crosschain.OutboundTxParams")
	proto.RegisterType((*Status)(nil), "zetachain.zetacore.crosschain.Status")
	proto.RegisterType((*CrossChainTx)(nil), "zetachain.zetacore.crosschain.CrossChainTx")
}

func init() { proto.RegisterFile("crosschain/cross_chain_tx.proto", fileDescriptor_af3a0ad055343c21) }

var fileDescriptor_af3a0ad055343c21 = []byte{
	// 1120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0x1b, 0x37,
	0x10, 0xd6, 0x46, 0x8a, 0x2c, 0x8d, 0x6c, 0x6b, 0x4d, 0xcb, 0xe9, 0xc2, 0x69, 0x24, 0x41, 0x6d,
	0x12, 0x25, 0x80, 0x25, 0xd8, 0x41, 0x11, 0xa0, 0x37, 0xdb, 0xb5, 0x13, 0x23, 0x89, 0x6d, 0x6c,
	0xed, 0x8b, 0x81, 0x62, 0x4b, 0xed, 0xd2, 0x12, 0x11, 0x69, 0xa9, 0x2e, 0x29, 0x43, 0x0e, 0xfa,
	0x10, 0x3d, 0xf4, 0x11, 0x7a, 0xe8, 0xa3, 0xe4, 0x50, 0xa0, 0x39, 0x16, 0x3d, 0x18, 0x85, 0x7d,
	0xee, 0xa5, 0x4f, 0x50, 0xf0, 0x67, 0x57, 0x6b, 0xd5, 0x3f, 0xfd, 0x3b, 0xed, 0x70, 0xc8, 0xef,
	0x9b, 0x21, 0xe7, 0x1b, 0x72, 0xa1, 0xe6, 0x47, 0x8c, 0x73, 0xbf, 0x87, 0x69, 0xd8, 0x56, 0xa6,
	0xa7, 0x6c, 0x4f, 0x8c, 0x5b, 0xc3, 0x88, 0x09, 0x86, 0x1e, 0xbc, 0x23, 0x02, 0x2b, 0x5f, 0x4b,
	0x59, 0x2c, 0x22, 0xad, 0x09, 0x66, 0x79, 0xd1, 0x67, 0x83, 0x01, 0x0b, 0xdb, 0xfa, 0xa3, 0x31,
	0xcb, 0x95, 0x2e, 0xeb, 0x32, 0x65, 0xb6, 0xa5, 0xa5, 0xbd, 0x8d, 0xdf, 0x73, 0x50, 0xde, 0x09,
	0x3b, 0x6c, 0x14, 0x06, 0x07, 0xe3, 0x7d, 0x1c, 0xe1, 0x01, 0x47, 0xf7, 0x20, 0xcf, 0x49, 0x18,
	0x90, 0xc8, 0xb1, 0xea, 0x56, 0xb3, 0xe8, 0x9a, 0x11, 0x7a, 0x04, 0x65, 0x6d, 0x99, 0x74, 0x68,
	0xe0, 0xdc, 0xa9, 0x5b, 0xcd, 0xac, 0x3b, 0xa7, 0xdd, 0x9b, 0xd2, 0xbb, 0x13, 0xa0, 0xfb, 0x50,
	0x14, 0x63, 0x8f, 0x45, 0xb4, 0x4b, 0x43, 0x27, 0xab, 0x28, 0x0a, 0x62, 0xbc, 0xa7, 0xc6, 0x68,
	0x05, 0x8a, 0x3e, 0x93, 0x7b, 0x39, 0x1d, 0x12, 0x27, 0x57, 0xb7, 0x9a, 0xf3, 0x6b, 0x76, 0xcb,
	0x24, 0xba, 0xc9, 0x68, 0x78, 0x70, 0x3a, 0x24, 0x6e, 0xc1, 0x37, 0x16, 0xaa, 0xc0, 0x5d, 0xcc,
	0x39, 0x11, 0xce, 0x5d, 0xc5, 0xa3, 0x07, 0xe8, 0x05, 0xe4, 0xf1, 0x80, 0x8d, 0x42, 0xe1, 0xe4,
	0xa5, 0x7b, 0xa3, 0xfd, 0xfe, 0xac, 0x96, 0xf9, 0xf5, 0xac, 0xf6, 0xb8, 0x4b, 0x45, 0x6f, 0xd4,
	0x91, 0x7c, 0x6d, 0x9f, 0xf1, 0x01, 0xe3, 0xe6, 0xb3, 0xc2, 0x83, 0xb7, 0x6d, 0x19, 0x92, 0xb7,
	0x0e, 0x69, 0x28, 0x5c, 0x03, 0x47, 0xcf, 0xc1, 0xa1, 0x7a, 0xf7, 0x9e, 0x4c, 0xb9, 0xc3, 0x49,
	0x74, 0x42, 0x02, 0xaf, 0x87, 0x79, 0xcf, 0x99, 0x51, 0x11, 0x97, 0x68, 0x7c, 0x3a, 0x7b, 0x66,
	0xf6, 0x25, 0xe6, 0x3d, 0xf4, 0x1a, 0x3e, 0xb9, 0x0a, 0x48, 0xc6, 0x82, 0x44, 0x21, 0xee, 0x7b,
	0x3d, 0x42, 0xbb, 0x3d, 0xe1, 0x14, 0xea, 0x56, 0x33, 0xe7, 0xd6, 0xfe, 0xc2, 0xb1, 0x65, 0xd6,
	0xbd, 0x54, 0xcb, 0xd0, 0x67, 0xf0, 0x51, 0x8a, 0xad, 0x83, 0xfb, 0x7d, 0x26, 0x3c, 0x1a, 0x06,
	0x64, 0xec, 0x14, 0x55, 0x16, 0x95, 0x84, 0x61, 0x43, 0x4d, 0xee, 0xc8, 0x39, 0xb4, 0x0d, 0xf5,
	0x14, 0xec, 0x98, 0x86, 0xb8, 0x4f, 0xdf, 0x91, 0xc0, 0x93, 0x9a, 0x88, 0x33, 0x00, 0x95, 0xc1,
	0xc7, 0x09, 0x7e, 0x3b, 0x5e, 0x75, 0x44, 0x04, 0x36, 0xe1, 0x29, 0xdc, 0x9b, 0xe0, 0xb1, 0xa0,
	0x2c, 0xf4, 0xb8, 0xc0, 0x62, 0xc4, 0x9d, 0x92, 0x2a, 0xd0, 0xb3, 0xd6, 0x8d, 0x7a, 0x6b, 0x25,
	0xac, 0x0a, 0xfb, 0xa5, 0x82, 0xba, 0x15, 0x71, 0x85, 0xb7, 0xf1, 0x0d, 0xcc, 0xcb, 0xc0, 0xeb,
	0xbe, 0x2f, 0xcf, 0x9f, 0x86, 0x5d, 0xe4, 0xc1, 0x22, 0xee, 0xb0, 0x48, 0xc4, 0x79, 0x9b, 0xc2,
	0x5a, 0xff, 0xae, 0xb0, 0x0b, 0x86, 0x4b, 0x05, 0x51, 0x4c, 0x8d, 0xef, 0x67, 0xc0, 0xde, 0x1b,
	0x89, 0xcb, 0x1a, 0x5f, 0x86, 0x42, 0x44, 0x7c, 0x42, 0x4f, 0x12, 0x95, 0x27, 0x63, 0xf4, 0x04,
	0xec, 0xd8, 0xd6, 0x4a, 0xdf, 0x89, 0x85, 0x5e, 0x8e, 0xfd, 0xb1, 0xd4, 0x2f, 0xa9, 0x39, 0x7b,
	0xab, 0x9a, 0x27, 0xba, 0xcd, 0xfd, 0x37, 0xdd, 0xae, 0xc2, 0x12, 0x33, 0x5b, 0x92, 0xa5, 0x17,
	0x9c, 0x7b, 0x21, 0x0b, 0x7d, 0xa2, 0xda, 0x24, 0xe7, 0x22, 0x96, 0xec, 0xf7, 0x80, 0xf3, 0x5d,
	0x39, 0x33, 0x0d, 0xe9, 0x62, 0xee, 0xf5, 0xe9, 0x80, 0xea, 0x16, 0xba, 0x04, 0x79, 0x81, 0xf9,
	0x6b, 0x39, 0x73, 0x15, 0x64, 0x18, 0x51, 0x9f, 0x98, 0xd6, 0xb8, 0x0c, 0xd9, 0x97, 0x33, 0xa8,
	0x09, 0x76, 0x1a, 0xa2, 0x1a, 0xa9, 0xa0, 0x56, 0xcf, 0x4f, 0x56, 0xab, 0x0e, 0x7a, 0x0e, 0x4e,
	0x7a, 0xe5, 0x15, 0xa2, 0x5f, 0x9a, 0x20, 0xd2, 0xaa, 0xdf, 0x85, 0x4f, 0xd3, 0xc0, 0x6b, 0x7b,
	0x4f, 0x2b, 0xbf, 0x3e, 0x21, 0xb9, 0xa6, 0xf9, 0xda, 0x50, 0x99, 0xde, 0xe5, 0x88, 0x93, 0xc0,
	0xa9, 0x28, 0xfc, 0xc2, 0xa5, 0x4d, 0x1e, 0x72, 0x12, 0x20, 0x01, 0xb5, 0x34, 0x80, 0x1c, 0x1f,
	0x13, 0x5f, 0xd0, 0x13, 0x92, 0x3a, 0xa0, 0x25, 0x55, 0xde, 0x96, 0x29, 0xef, 0xa3, 0xbf, 0x51,
	0xde, 0x9d, 0x50, 0xb8, 0xf7, 0x27, 0xb1, 0xb6, 0x62, 0xd2, 0xe4, 0x64, 0xbf, 0xb8, 0x29, 0xaa,
	0xae, 0xe4, 0x3d, 0x95, 0xf1, 0x35, 0x2c, 0xba, 0xa4, 0x0f, 0x00, 0xa4, 0x58, 0x86, 0xa3, 0xce,
	0x5b, 0x72, 0xaa, 0xda, 0xbb, 0xe8, 0x16, 0x05, 0xe7, 0xfb, 0xca, 0x71, 0xc3, 0x4d, 0x30, 0xfb,
	0x7f, 0xdf, 0x04, 0x3f, 0x5b, 0x90, 0xd7, 0x26, 0x5a, 0x87, 0xbc, 0x89, 0x62, 0xa9, 0x28, 0x4f,
	0x6e, 0x89, 0xb2, 0xe9, 0x8b, 0xb1, 0xe1, 0x36, 0x40, 0xf4, 0x10, 0xe6, 0xb5, 0xe5, 0x0d, 0x08,
	0xe7, 0xb8, 0x4b, 0x54, 0xc7, 0x16, 0xdd, 0x39, 0xed, 0x7d, 0xa3, 0x9d, 0x68, 0x15, 0x2a, 0x7d,
	0xcc, 0xc5, 0xe1, 0x30, 0xc0, 0x82, 0x78, 0x82, 0x0e, 0x08, 0x17, 0x78, 0x30, 0x54, 0xad, 0x9b,
	0x75, 0x17, 0x27, 0x73, 0x07, 0xf1, 0x14, 0x6a, 0x42, 0x99, 0xf2, 0x75, 0x79, 0xab, 0xb8, 0xe4,
	0x78, 0x14, 0x06, 0x24, 0x50, 0xcd, 0x5b, 0x70, 0xa7, 0xdd, 0x8d, 0x9f, 0xb2, 0x30, 0xbb, 0x29,
	0xb3, 0x54, 0xb7, 0xc3, 0xc1, 0x18, 0x39, 0x30, 0xe3, 0x47, 0x04, 0x0b, 0x16, 0xdf, 0x31, 0xf1,
	0x50, 0x3e, 0x6b, 0x5a, 0xe9, 0x3a, 0x4b, 0x3d, 0x40, 0x5f, 0x43, 0x51, 0x5d, 0x81, 0xc7, 0x84,
	0x70, 0xfd, 0xe0, 0x6d, 0x6c, 0xfe, 0xc3, 0x1b, 0xe2, 0x8f, 0xb3, 0x9a, 0x7d, 0x8a, 0x07, 0xfd,
	0xcf, 0x1b, 0x09, 0x53, 0xc3, 0x2d, 0x48, 0x7b, 0x9b, 0x10, 0x8e, 0x1e, 0x43, 0x39, 0x22, 0x7d,
	0x7c, 0x4a, 0x82, 0xe4, 0x9c, 0xf2, 0xba, 0x3b, 0x8d, 0x3b, 0x3e, 0xa8, 0x6d, 0x28, 0xf9, 0xbe,
	0x18, 0xc7, 0xd5, 0x97, 0x2d, 0x5c, 0x5a, 0x7b, 0x78, 0x4b, 0x5d, 0x4c, 0x4d, 0xc0, 0x4f, 0xea,
	0x83, 0x8e, 0x60, 0x21, 0xf5, 0x44, 0x0d, 0xd5, 0xe5, 0xab, 0xda, 0xbb, 0xb4, 0xd6, 0xba, 0x85,
	0x6d, 0xea, 0xb7, 0xc4, 0x2d, 0xd3, 0xa9, 0xff, 0x94, 0xaf, 0x00, 0xa5, 0x3b, 0xc2, 0x90, 0x43,
	0x3d, 0xdb, 0x2c, 0xad, 0xb5, 0x6f, 0x21, 0x9f, 0x7e, 0x10, 0x5c, 0x9b, 0x4d, 0x79, 0x9e, 0x7e,
	0x0b, 0x30, 0x11, 0x1a, 0x42, 0x30, 0xbf, 0x4f, 0xc2, 0x80, 0x86, 0x5d, 0x93, 0x97, 0x9d, 0x41,
	0x8b, 0x50, 0x36, 0xbe, 0x98, 0xce, 0xb6, 0xd0, 0x02, 0xcc, 0xc5, 0xa3, 0x37, 0x34, 0x24, 0x81,
	0x9d, 0x95, 0x2e, 0xb3, 0xce, 0x25, 0x27, 0x24, 0x12, 0x76, 0x0e, 0xcd, 0x42, 0x41, 0xdb, 0x24,
	0xb0, 0xef, 0xa2, 0x12, 0xcc, 0xac, 0xeb, 0x77, 0xcb, 0xce, 0x2f, 0xe7, 0x7e, 0xfc, 0xa1, 0x6a,
	0x3d, 0x7d, 0x05, 0x95, 0xab, 0x9a, 0x09, 0xd9, 0x30, 0xbb, 0xcb, 0x44, 0xf2, 0x8a, 0xdb, 0x19,
	0x34, 0x07, 0xc5, 0xc9, 0xd0, 0x92, 0xcc, 0x5b, 0x63, 0xe2, 0x8f, 0x24, 0xd9, 0x1d, 0x4d, 0xb6,
	0xf1, 0xea, 0xfd, 0x79, 0xd5, 0xfa, 0x70, 0x5e, 0xb5, 0x7e, 0x3b, 0xaf, 0x5a, 0xdf, 0x5d, 0x54,
	0x33, 0x1f, 0x2e, 0xaa, 0x99, 0x5f, 0x2e, 0xaa, 0x99, 0xa3, 0xd5, 0x94, 0xae, 0xe4, 0x39, 0xad,
	0xe8, 0xbf, 0xce, 0xf8, 0xc8, 0xda, 0xe3, 0x76, 0xea, 0x5f, 0x54, 0xc9, 0xac, 0x93, 0x57, 0x7f,
	0x8e, 0xcf, 0xfe, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x13, 0xc7, 0x24, 0x8d, 0xa6, 0x0a, 0x00, 0x00,
}

func (m *InboundTxParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundTxParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundTxParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.InboundTxFinalizedZetaHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.InboundTxFinalizedZetaHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InboundTxBallotIndex) > 0 {
		i -= len(m.InboundTxBallotIndex)
		copy(dAtA[i:], m.InboundTxBallotIndex)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.InboundTxBallotIndex)))
		i--
		dAtA[i] = 0x4a
	}
	if m.InboundTxObservedExternalHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.InboundTxObservedExternalHeight))
		i--
		dAtA[i] = 0x40
	}
	if len(m.InboundTxObservedHash) > 0 {
		i -= len(m.InboundTxObservedHash)
		copy(dAtA[i:], m.InboundTxObservedHash)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.InboundTxObservedHash)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinType != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderChainId != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ZetaAccounting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZetaAccounting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZetaAccounting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AbortedZetaAmount.Size()
		i -= size
		if _, err := m.AbortedZetaAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *OutboundTxParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTxParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTxParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundTxEffectiveGasLimit != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutboundTxEffectiveGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size := m.OutboundTxEffectiveGasPrice.Size()
		i -= size
		if _, err := m.OutboundTxEffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.OutboundTxGasUsed != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutboundTxGasUsed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x60
	}
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0x5a
	}
	if m.OutboundTxObservedExternalHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutboundTxObservedExternalHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.OutboundTxBallotIndex) > 0 {
		i -= len(m.OutboundTxBallotIndex)
		copy(dAtA[i:], m.OutboundTxBallotIndex)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.OutboundTxBallotIndex)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OutboundTxHash) > 0 {
		i -= len(m.OutboundTxHash)
		copy(dAtA[i:], m.OutboundTxHash)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.OutboundTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutboundTxGasPrice) > 0 {
		i -= len(m.OutboundTxGasPrice)
		copy(dAtA[i:], m.OutboundTxGasPrice)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.OutboundTxGasPrice)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OutboundTxGasLimit != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutboundTxGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.OutboundTxTssNonce != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutboundTxTssNonce))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.CoinType != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverChainId != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.ReceiverChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAbortRefunded {
		i--
		if m.IsAbortRefunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.LastUpdateTimestamp != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.LastUpdateTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundTxParams) > 0 {
		for iNdEx := len(m.OutboundTxParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundTxParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.InboundTxParams != nil {
		{
			size, err := m.InboundTxParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CctxStatus != nil {
		{
			size, err := m.CctxStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.RelayedMessage) > 0 {
		i -= len(m.RelayedMessage)
		copy(dAtA[i:], m.RelayedMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.RelayedMessage)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.ZetaFees.Size()
		i -= size
		if _, err := m.ZetaFees.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossChainTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossChainTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InboundTxParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovCrossChainTx(uint64(m.SenderChainId))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainTx(uint64(m.CoinType))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	l = len(m.InboundTxObservedHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.InboundTxObservedExternalHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.InboundTxObservedExternalHeight))
	}
	l = len(m.InboundTxBallotIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.InboundTxFinalizedZetaHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.InboundTxFinalizedZetaHeight))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovCrossChainTx(uint64(m.TxFinalizationStatus))
	}
	return n
}

func (m *ZetaAccounting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AbortedZetaAmount.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	return n
}

func (m *OutboundTxParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.ReceiverChainId != 0 {
		n += 1 + sovCrossChainTx(uint64(m.ReceiverChainId))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainTx(uint64(m.CoinType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	if m.OutboundTxTssNonce != 0 {
		n += 1 + sovCrossChainTx(uint64(m.OutboundTxTssNonce))
	}
	if m.OutboundTxGasLimit != 0 {
		n += 1 + sovCrossChainTx(uint64(m.OutboundTxGasLimit))
	}
	l = len(m.OutboundTxGasPrice)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.OutboundTxHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.OutboundTxBallotIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.OutboundTxObservedExternalHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.OutboundTxObservedExternalHeight))
	}
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovCrossChainTx(uint64(m.TxFinalizationStatus))
	}
	if m.OutboundTxGasUsed != 0 {
		n += 2 + sovCrossChainTx(uint64(m.OutboundTxGasUsed))
	}
	l = m.OutboundTxEffectiveGasPrice.Size()
	n += 2 + l + sovCrossChainTx(uint64(l))
	if m.OutboundTxEffectiveGasLimit != 0 {
		n += 2 + sovCrossChainTx(uint64(m.OutboundTxEffectiveGasLimit))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCrossChainTx(uint64(m.Status))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.LastUpdateTimestamp != 0 {
		n += 1 + sovCrossChainTx(uint64(m.LastUpdateTimestamp))
	}
	if m.IsAbortRefunded {
		n += 2
	}
	return n
}

func (m *CrossChainTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = m.ZetaFees.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	l = len(m.RelayedMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.CctxStatus != nil {
		l = m.CctxStatus.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.InboundTxParams != nil {
		l = m.InboundTxParams.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if len(m.OutboundTxParams) > 0 {
		for _, e := range m.OutboundTxParams {
			l = e.Size()
			n += 1 + l + sovCrossChainTx(uint64(l))
		}
	}
	return n
}

func sovCrossChainTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossChainTx(x uint64) (n int) {
	return sovCrossChainTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InboundTxParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundTxParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundTxParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= common.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxObservedHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTxObservedHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxObservedExternalHeight", wireType)
			}
			m.InboundTxObservedExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxObservedExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxBallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTxBallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxFinalizedZetaHeight", wireType)
			}
			m.InboundTxFinalizedZetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxFinalizedZetaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZetaAccounting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZetaAccounting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZetaAccounting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbortedZetaAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AbortedZetaAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTxParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTxParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTxParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChainId", wireType)
			}
			m.ReceiverChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= common.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxTssNonce", wireType)
			}
			m.OutboundTxTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasLimit", wireType)
			}
			m.OutboundTxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxGasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxBallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxBallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxObservedExternalHeight", wireType)
			}
			m.OutboundTxObservedExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxObservedExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasUsed", wireType)
			}
			m.OutboundTxGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxEffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundTxEffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxEffectiveGasLimit", wireType)
			}
			m.OutboundTxEffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxEffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CctxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTimestamp", wireType)
			}
			m.LastUpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAbortRefunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAbortRefunded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CctxStatus == nil {
				m.CctxStatus = &Status{}
			}
			if err := m.CctxStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundTxParams == nil {
				m.InboundTxParams = &InboundTxParams{}
			}
			if err := m.InboundTxParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxParams = append(m.OutboundTxParams, &OutboundTxParams{})
			if err := m.OutboundTxParams[len(m.OutboundTxParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossChainTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossChainTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossChainTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossChainTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossChainTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossChainTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossChainTx = fmt.Errorf("proto: unexpected end of group")
)
