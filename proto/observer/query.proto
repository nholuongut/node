syntax = "proto3";
package zetachain.zetacore.observer;

import "common/common.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "observer/ballot.proto";
import "observer/blame.proto";
import "observer/block_header.proto";
import "observer/chain_nonces.proto";
import "observer/crosschain_flags.proto";
import "observer/keygen.proto";
import "observer/node_account.proto";
import "observer/observer.proto";
import "observer/params.proto";
import "observer/pending_nonces.proto";
import "observer/tss.proto";

option go_package = "github.com/zeta-chain/zetacore/x/observer/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/zeta-chain/observer/params";
  }
  // Query if a voter has voted for a ballot
  rpc HasVoted(QueryHasVotedRequest) returns (QueryHasVotedResponse) {
    option (google.api.http).get = "/zeta-chain/observer/has_voted/{ballot_identifier}/{voter_address}";
  }
  // Queries a list of VoterByIdentifier items.
  rpc BallotByIdentifier(QueryBallotByIdentifierRequest) returns (QueryBallotByIdentifierResponse) {
    option (google.api.http).get = "/zeta-chain/observer/ballot_by_identifier/{ballot_identifier}";
  }

  // Queries a list of ObserversByChainAndType items.
  rpc ObserverSet(QueryObserverSet) returns (QueryObserverSetResponse) {
    option (google.api.http).get = "/zeta-chain/observer/observer_set";
  }

  rpc SupportedChains(QuerySupportedChains) returns (QuerySupportedChainsResponse) {
    option (google.api.http).get = "/zeta-chain/observer/supportedChains";
  }

  // Queries a list of GetChainParamsForChain items.
  rpc GetChainParamsForChain(QueryGetChainParamsForChainRequest) returns (QueryGetChainParamsForChainResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_chain_params_for_chain/{chain_id}";
  }

  // Queries a list of GetChainParams items.
  rpc GetChainParams(QueryGetChainParamsRequest) returns (QueryGetChainParamsResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_chain_params";
  }

  // Queries a nodeAccount by index.
  rpc NodeAccount(QueryGetNodeAccountRequest) returns (QueryGetNodeAccountResponse) {
    option (google.api.http).get = "/zeta-chain/observer/nodeAccount/{index}";
  }

  // Queries a list of nodeAccount items.
  rpc NodeAccountAll(QueryAllNodeAccountRequest) returns (QueryAllNodeAccountResponse) {
    option (google.api.http).get = "/zeta-chain/observer/nodeAccount";
  }

  rpc CrosschainFlags(QueryGetCrosschainFlagsRequest) returns (QueryGetCrosschainFlagsResponse) {
    option (google.api.http).get = "/zeta-chain/observer/crosschain_flags";
  }

  // Queries a keygen by index.
  rpc Keygen(QueryGetKeygenRequest) returns (QueryGetKeygenResponse) {
    option (google.api.http).get = "/zeta-chain/observer/keygen";
  }

  // Queries a list of ShowObserverCount items.
  rpc ShowObserverCount(QueryShowObserverCountRequest) returns (QueryShowObserverCountResponse) {
    option (google.api.http).get = "/zeta-chain/zetacore/observer/show_observer_count";
  }

  // Queries a list of VoterByIdentifier items.
  rpc BlameByIdentifier(QueryBlameByIdentifierRequest) returns (QueryBlameByIdentifierResponse) {
    option (google.api.http).get = "/zeta-chain/observer/blame_by_identifier/{blame_identifier}";
  }

  // Queries a list of VoterByIdentifier items.
  rpc GetAllBlameRecords(QueryAllBlameRecordsRequest) returns (QueryAllBlameRecordsResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_all_blame_records";
  }

  // Queries a list of VoterByIdentifier items.
  rpc BlamesByChainAndNonce(QueryBlameByChainAndNonceRequest) returns (QueryBlameByChainAndNonceResponse) {
    option (google.api.http).get = "/zeta-chain/observer/blame_by_chain_and_nonce/{chain_id}/{nonce}";
  }

  rpc GetAllBlockHeaders(QueryAllBlockHeaderRequest) returns (QueryAllBlockHeaderResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_all_block_headers";
  }

  rpc GetBlockHeaderByHash(QueryGetBlockHeaderByHashRequest) returns (QueryGetBlockHeaderByHashResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_block_header_by_hash/{block_hash}";
  }

  rpc GetBlockHeaderStateByChain(QueryGetBlockHeaderStateRequest) returns (QueryGetBlockHeaderStateResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_block_header_state_by_chain_id/{chain_id}";
  }

  // merkle proof verification
  rpc Prove(QueryProveRequest) returns (QueryProveResponse) {
    option (google.api.http).get = "/zeta-chain/observer/prove";
  }

  // Queries a list of GetTssAddress items.
  rpc GetTssAddress(QueryGetTssAddressRequest) returns (QueryGetTssAddressResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_tss_address/{bitcoin_chain_id}";
  }

  rpc GetTssAddressByFinalizedHeight(QueryGetTssAddressByFinalizedHeightRequest) returns (QueryGetTssAddressByFinalizedHeightResponse) {
    option (google.api.http).get = "/zeta-chain/observer/get_tss_address_historical/{finalized_zeta_height}/{bitcoin_chain_id}";
  }

  // Queries a tSS by index.
  rpc TSS(QueryGetTSSRequest) returns (QueryGetTSSResponse) {
    option (google.api.http).get = "/zeta-chain/observer/TSS";
  }

  rpc TssHistory(QueryTssHistoryRequest) returns (QueryTssHistoryResponse) {
    option (google.api.http).get = "/zeta-chain/observer/tssHistory";
  }

  rpc PendingNoncesAll(QueryAllPendingNoncesRequest) returns (QueryAllPendingNoncesResponse) {
    option (google.api.http).get = "/zeta-chain/observer/pendingNonces";
  }

  rpc PendingNoncesByChain(QueryPendingNoncesByChainRequest) returns (QueryPendingNoncesByChainResponse) {
    option (google.api.http).get = "/zeta-chain/observer/pendingNonces/{chain_id}";
  }

  // Queries a chainNonces by index.
  rpc ChainNonces(QueryGetChainNoncesRequest) returns (QueryGetChainNoncesResponse) {
    option (google.api.http).get = "/zeta-chain/observer/chainNonces/{index}";
  }

  // Queries a list of chainNonces items.
  rpc ChainNoncesAll(QueryAllChainNoncesRequest) returns (QueryAllChainNoncesResponse) {
    option (google.api.http).get = "/zeta-chain/observer/chainNonces";
  }
}

message QueryGetChainNoncesRequest {
  string index = 1;
}

message QueryGetChainNoncesResponse {
  ChainNonces ChainNonces = 1 [(gogoproto.nullable) = false];
}

message QueryAllChainNoncesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllChainNoncesResponse {
  repeated ChainNonces ChainNonces = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllPendingNoncesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllPendingNoncesResponse {
  repeated PendingNonces pending_nonces = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryPendingNoncesByChainRequest {
  int64 chain_id = 1;
}

message QueryPendingNoncesByChainResponse {
  PendingNonces pending_nonces = 1 [(gogoproto.nullable) = false];
}

message QueryGetTSSRequest {}

message QueryGetTSSResponse {
  TSS TSS = 1 [(gogoproto.nullable) = false];
}

message QueryGetTssAddressRequest {
  int64 bitcoin_chain_id = 2;
}

message QueryGetTssAddressResponse {
  string eth = 1;
  string btc = 2;
}

message QueryGetTssAddressByFinalizedHeightRequest {
  int64 finalized_zeta_height = 1;
  int64 bitcoin_chain_id = 2;
}

message QueryGetTssAddressByFinalizedHeightResponse {
  string eth = 1;
  string btc = 2;
}

message QueryTssHistoryRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryTssHistoryResponse {
  repeated TSS tss_list = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryProveRequest {
  int64 chain_id = 1;
  string tx_hash = 2;
  common.Proof proof = 3;
  string block_hash = 4;
  int64 tx_index = 5;
}

message QueryProveResponse {
  bool valid = 1;
}

message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryHasVotedRequest {
  string ballot_identifier = 1;
  string voter_address = 2;
}

message QueryHasVotedResponse {
  bool has_voted = 1;
}

message QueryBallotByIdentifierRequest {
  string ballot_identifier = 1;
}
message VoterList {
  string voter_address = 1;
  VoteType vote_type = 2;
}

message QueryBallotByIdentifierResponse {
  string ballot_identifier = 1;
  repeated VoterList voters = 2;
  ObservationType observation_type = 3;
  BallotStatus ballot_status = 4;
}

message QueryObserverSet {}

message QueryObserverSetResponse {
  repeated string observers = 1;
}

message QuerySupportedChains {}

message QuerySupportedChainsResponse {
  repeated common.Chain chains = 1;
}

message QueryGetChainParamsForChainRequest {
  int64 chain_id = 1;
}

message QueryGetChainParamsForChainResponse {
  ChainParams chain_params = 1;
}

message QueryGetChainParamsRequest {}

message QueryGetChainParamsResponse {
  ChainParamsList chain_params = 1;
}

message QueryGetNodeAccountRequest {
  string index = 1;
}

message QueryGetNodeAccountResponse {
  NodeAccount node_account = 1;
}

message QueryAllNodeAccountRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNodeAccountResponse {
  repeated NodeAccount NodeAccount = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetCrosschainFlagsRequest {}

message QueryGetCrosschainFlagsResponse {
  CrosschainFlags crosschain_flags = 1 [(gogoproto.nullable) = false];
}

message QueryGetKeygenRequest {}

message QueryGetKeygenResponse {
  Keygen keygen = 1;
}

message QueryShowObserverCountRequest {}

message QueryShowObserverCountResponse {
  LastObserverCount last_observer_count = 1;
}

message QueryBlameByIdentifierRequest {
  string blame_identifier = 1;
}

message QueryBlameByIdentifierResponse {
  Blame blame_info = 1;
}

message QueryAllBlameRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlameRecordsResponse {
  repeated Blame blame_info = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryBlameByChainAndNonceRequest {
  int64 chain_id = 1;
  int64 nonce = 2;
}

message QueryBlameByChainAndNonceResponse {
  repeated Blame blame_info = 1;
}

message QueryAllBlockHeaderRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockHeaderResponse {
  repeated common.BlockHeader block_headers = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBlockHeaderByHashRequest {
  bytes block_hash = 1;
}

message QueryGetBlockHeaderByHashResponse {
  common.BlockHeader block_header = 1;
}

message QueryGetBlockHeaderStateRequest {
  int64 chain_id = 1;
}

message QueryGetBlockHeaderStateResponse {
  BlockHeaderState block_header_state = 1;
}
