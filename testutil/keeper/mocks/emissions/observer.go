// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	observertypes "github.com/zeta-chain/zetacore/x/observer/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// EmissionObserverKeeper is an autogenerated mock type for the EmissionObserverKeeper type
type EmissionObserverKeeper struct {
	mock.Mock
}

// GetBallot provides a mock function with given fields: ctx, index
func (_m *EmissionObserverKeeper) GetBallot(ctx types.Context, index string) (observertypes.Ballot, bool) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetBallot")
	}

	var r0 observertypes.Ballot
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (observertypes.Ballot, bool)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) observertypes.Ballot); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Get(0).(observertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMaturedBallotList provides a mock function with given fields: ctx
func (_m *EmissionObserverKeeper) GetMaturedBallotList(ctx types.Context) []string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMaturedBallotList")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(types.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NewEmissionObserverKeeper creates a new instance of EmissionObserverKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmissionObserverKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmissionObserverKeeper {
	mock := &EmissionObserverKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
